generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String              @id @default(uuid())     @unique
  privyUserId       String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isAdmin           Boolean             @default(false)
  hasFinishedSetup  Boolean             @default(false)
  exWallet          String?             @unique
  custodyAddress    String?
  verifications     String[]
  agencies          AgencyOwner[]
  bookmarks         Bookmark[]
  comments          Comment[]
  follow            Follow[]
  notifications     Notification[]
  profile           Profile?
  verifiedAddresses VerifiedAddresses[]
  votes             Vote[]
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  storyId   String
  parentId  String?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
  story     Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  vote      VoteType @default(NONE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  storyId   String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bookmarked Boolean  @default(false)
  userId     String
  storyId    String
  story      Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String    @id @default(uuid())
  type       String
  isRead     Boolean   @default(false)
  readAt     DateTime?
  message    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  agentId    String
  storyUrl   String
  storyTitle String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id                      String   @id @default(uuid())
  fid                     Int      @unique
  bioText                 String
  mentioned_profiles      String[]
  userName                String   @unique
  displayName             String
  avatarUrl               String?  @db.VarChar(500)
  farcasterFollowerCount  Int
  farcasterFollowingCount Int
  activeStatus            String?
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerifiedAddresses {
  id           String   @id @default(uuid())
  ethAddresses String[]
  solAddresses String[]
  userId       String
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Agency {
  id          String        @id @default(uuid())
  userName    String        @unique
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String
  logo        String?
  owners      AgencyOwner[]
  agents      Agent[]
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgencyOwner {
  userId   String
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id])
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, agencyId])
}

model AIModel {
  id               String  @id @default(uuid())
  llm              String
  model            String
  tools            String?
  apiKey           String
  tasks            Task[]
  agents           Agent[] @relation("AgentToAIModel")
  defaultForAgents Agent[] @relation("DefaultAIModelToAgent")
}

model Agent {
  id               String        @id @default(uuid())
  agencyId         String
  created          DateTime      @default(now())
  updated          DateTime      @updatedAt
  userName         String        @unique
  agency           Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  followers        Follow[]
  points           Point[]
  profile          ProfileAgent?
  prompts          Prompt[]
  sources          Source[]
  stories          Story[]
  tasks            Task[]
  aiModels         AIModel[]     @relation("AgentToAIModel")
  defaultAiModelId String?
  defaultAiModel   AIModel?      @relation("DefaultAIModelToAgent", fields: [defaultAiModelId], references: [id])
  categories       Category[]    @relation("AgentToCategory")
}

model ProfileAgent {
  id                  String  @id @default(uuid())
  name                String
  avatarUrl           String? @db.VarChar(500)
  description         String
  focus               String?
  agentId             String  @unique
  defaultInstructions String?
  agent               Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model Source {
  id              String     @id @default(uuid())
  agentId         String
  type            SourceType
  ids             String[]
  scrapperRunId   String
  agent           Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  runs            Run        @relation(fields: [scrapperRunId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agents    Agent[]  @relation("AgentToCategory")
}

model Task {
  id           String     @id @default(uuid())
  agentId      String
  createdAt    DateTime   @default(now())
  isOneTimeRun Boolean    @default(true)
  interval     Int?
  state        TaskState? @default(ACTIVE)
  description  String?
  name         String
  Agent        Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  runs         Run[]
  promptId     String
  Prompt       Prompt     @relation(fields: [promptId], references: [id], onDelete: Cascade)
  aiModelId    String
  AIModel      AIModel    @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
}

model Run {
  id        String      @id @default(uuid())
  taskId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  status    RunStatus   @default(PENDING)
  Task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  story     Story?
  sources   Source[]
  cost      Float?
  tokens    Float?
  results   RunResult[]
}

model RunResult {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  run          Run      @relation(fields: [runId], references: [id])
  runId        String
  sourceOutput Json?
  llmOutput    Json?
}

model Prompt {
  id             String          @id @default(uuid())
  prompt         String
  responseFormat Json?
  outputStyle    String?
  temperature    Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  agentId        String
  tasks          Task[]
  agent          Agent           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  promptMessage  PromptMessage[]
  systemMessage  SystemMessage[]
}

model PromptMessage {
  id        String   @id @default(uuid())
  role      String   @default("user")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id])
}

model SystemMessage {
  id        String   @id @default(uuid())
  role      String   @default("system")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id])
}

model Story {
  id        String     @id @default(uuid())
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  agentId   String
  tags      String[]
  views     Int        @default(0)
  bookmarks Bookmark[]
  comments  Comment[]
  points    Point[]
  agent     Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  runId     String     @unique
  run       Run        @relation(fields: [runId], references: [id], onDelete: Cascade)
  votes     Vote[]
}

model Point {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String?
  agentId   String?
  points    Int      @default(0)
  agent     Agent?   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

enum VoteType {
  UP
  DOWN
  NONE
}

enum SourceType {
  FARCASTER_USER
  FARCASTER_POST
  FARCASTER_CHANNEL
}

enum TaskState {
  ACTIVE
  INACTIVE
}

enum RunStatus {
  CANCELLED
  PENDING
  RUNNING
  COMPLETED
  FAILED
}
