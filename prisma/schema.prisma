generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String              @id @unique @default(uuid())
  privyUserId       String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isAdmin           Boolean             @default(false)
  hasFinishedSetup  Boolean             @default(false)
  exWallet          String?             @unique
  custodyAddress    String?
  verifications     String[]
  agencies          AgencyOwner[]
  bookmarks         Bookmark[]
  comments          Comment[]
  follow            Follow[]
  notifications     Notification[]
  profile           Profile?
  verifiedAddresses VerifiedAddresses[]
  votes             Vote[]
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  storyId   String
  parentId  String?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
  story     Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  vote      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  storyId   String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bookmarked Boolean  @default(false)
  userId     String
  storyId    String
  story      Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String    @id @default(uuid())
  type       String
  isRead     Boolean   @default(false)
  readAt     DateTime?
  message    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  agentId    String
  storyUrl   String
  storyTitle String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id                      String   @id @default(uuid())
  fid                     Int      @unique
  bioText                 String
  mentioned_profiles      String[]
  userName                String   @unique
  displayName             String
  avatarUrl               String?  @db.VarChar(500)
  farcasterFollowerCount  Int
  farcasterFollowingCount Int
  activeStatus            String?
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerifiedAddresses {
  id           String   @id @default(uuid())
  ethAddresses String[]
  solAddresses String[]
  userId       String
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Agency {
  id          String        @id @default(uuid())
  userName    String        @unique
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String
  logo        String?
  owners      AgencyOwner[]
  agents      Agent[]
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgencyOwner {
  userId   String
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id])
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, agencyId])
}

model AIModel {
  id               String  @id @default(uuid())
  llm              String
  model            String
  tools            String?
  apiKey           String
  tasks            Task[]
  agents           Agent[] @relation("AgentToAIModel")
  defaultForAgents Agent[] @relation("DefaultAIModelToAgent")
}

model Agent {
  id               String          @id @default(uuid())
  agencyId         String
  created          DateTime        @default(now())
  updated          DateTime        @updatedAt
  userName         String          @unique
  agency           Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  followers        Follow[]
  points           Point[]
  profile          ProfileAgent?
  prompts          Prompt[]
  storyAuthors     StoryAuthor[]
  tasks            Task[]
  aiModels         AIModel[]       @relation("AgentToAIModel")
  defaultAiModelId String?
  defaultAiModel   AIModel?        @relation("DefaultAIModelToAgent", fields: [defaultAiModelId], references: [id])
  categories       AgentCategory[] @relation("AgentToCategory")
}

model ProfileAgent {
  id                  String  @id @default(uuid())
  name                String
  avatarUrl           String? @db.VarChar(500)
  description         String
  focus               String?
  agentId             String  @unique
  defaultInstructions String?
  agent               Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model AgentCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agents    Agent[]  @relation("AgentToCategory")
}

// SOURCE AS TASK INPUT ///

model Source {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  agentId   String
  runId     String
  run       Run              @relation(fields: [runId], references: [id], onDelete: Cascade)
  casts     FarcasterPosts[]
}

model FarcasterPosts {
  id           String             @id @default(uuid())
  createdAt    DateTime           @default(now())
  sourceId     String
  inputs       String
  inputType    FarcasterInputType
  source       Source             @relation(fields: [sourceId], references: [id ], onDelete: Cascade) 
  limit        Int?
  isWithRecast Boolean?
}

model Task {
  id            String     @id @default(uuid())
  agentId       String
  createdAt     DateTime   @default(now())
  isStaticRun   Boolean    @default(true)
  interval      Int?
  state         TaskState? @default(ACTIVE)
  description   String?
  limit         Int?
  isWithRecasts Boolean?   @default(false)
  name          String
  Agent         Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  runs          Run[]
  promptId      String
  Prompt        Prompt     @relation(fields: [promptId], references: [id], onDelete: Cascade)
  aiModelId     String
  AIModel       AIModel    @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
}

model Run {
  id           String      @id @default(uuid())
  eventId      String?
  eventName    String?
  triggerRunId String?
  taskId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  status       RunStatus   @default(CREATED)
  Task         Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  storyId      String
  story        Story       @relation(fields: [storyId], references: [id], onDelete: Cascade)
  sources      Source[]
  cost         Float?
  tokens       Float?
  results      RunResult[]
}

model RunResult {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  run         Run           @relation(fields: [runId], references: [id] , onDelete: Cascade)
  runId       String
  sourcePost  SourcePost[]
  LLMResponse LLMResponse[]
}

////////////////  SCRAPPER OUTPUT START  ///////////////////////

model SourcePost {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  timestamp   DateTime
  content     String
  likes       Int?
  reCasts     Int?
  output      Json?
  hash        String
  authorId    String
  author      SourceAuthor @relation(fields: [authorId], references: [id] )
  runResultId String
  runResult   RunResult    @relation(fields: [runResultId], references: [id] , onDelete: Cascade)
}

model SourceAuthor {
  id            String       @id @default(uuid())
  fid           Int          @unique
  createdAt     DateTime     @default(now())
  userName      String
  displayName   String
  bioText       String?
  verifications String[]
  avatarUrl     String?      @db.VarChar(500)
  followers     Int?
  following     Int?
  activeStatus  String?
  posts         SourcePost[]
}

////////////////  SCRAPPER OUTPUT END  ///////////////////////

//////////////// LLM OUTPUT START ///////////////////////
model LLMResponse {
  id                String       @id @default(uuid())
  createdAt         DateTime     @default(now())
  model             String
  promptToken       Int?
  completionToken   Int?
  systemFingerPrint String?
  finishReason      String?
  content           LLMContent[]
  runId             String
  runResultId       String
  runResult         RunResult    @relation(fields: [runResultId], references: [id] , onDelete: Cascade)
  output            Json?
  toolCalls         ToolCall[]
}

model LLMContent {
  id            String                 @id @default(uuid())
  title         String?
  content       String?
  summary       String?
  categories    CategoryOnLLMContent[]
  tags          TagOnLLMContent[]
  manipulation  String?
  annotations   Annotations[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  LLMResponseId String
  llmResponse   LLMResponse            @relation(fields: [LLMResponseId], references: [id], onDelete: Cascade)
}

// add embedding later

model Category {
  id          String                 @id @default(uuid())
  name        String                 @unique
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  llmContents CategoryOnLLMContent[]
}

model CategoryOnLLMContent {
  categoryId   String
  llmContentId String
  category     Category   @relation(fields: [categoryId], references: [id])
  llmContent   LLMContent @relation(fields: [llmContentId], references: [id], onDelete: Cascade)

  @@id([categoryId, llmContentId])
}

model Annotations {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  llmcontentId   String
  userName       String?
  annotationText String?
  llmcontent     LLMContent @relation(fields: [llmcontentId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String            @id @default(uuid())
  name        String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  llmContents TagOnLLMContent[]
}

model TagOnLLMContent {
  tagId        String
  llmContentId String
  tag          Tag        @relation(fields: [tagId], references: [id])
  llmContent   LLMContent @relation(fields: [llmContentId], references: [id] , onDelete: Cascade)

  @@id([tagId, llmContentId])
}

model ToolCall {
  id            String      @id @default(uuid())
  type          String
  function      Json
  LLMResponse   LLMResponse @relation(fields: [LLMResponseId], references: [id] , onDelete: Cascade)
  LLMResponseId String
}

//////////////// LLM OUTPUT END  ///////////////////////

//////////////// LLM INPUT START  ///////////////////////
model Prompt {
  id             String          @id @default(uuid())
  outputStyle    String?
  temperature    Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  maxTokens      Int?
  responseFormat Json?
  seed           String?
  tools          Tool[] // This field links to the Tool model
  agentId        String
  tasks          Task[]
  agent          Agent           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  promptMessage  PromptMessage[]
  systemMessage  SystemMessage[]
}

model PromptMessage {
  id        String   @id @default(uuid())
  role      String   @default("user")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id] , onDelete: Cascade)
}

model SystemMessage {
  id        String   @id @default(uuid())
  role      String   @default("system")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id])
}

model Tool {
  id         String    @id @default(uuid())
  type       String    @default("function")
  functionId String?   @unique
  function   Function? @relation(fields: [functionId], references: [id])
  promptId   String
  prompt     Prompt    @relation(fields: [promptId], references: [id])
}

model Function {
  id          String @id @default(uuid())
  name        String
  description String
  parameters  Json
  tool        Tool?
}

//////////////// LLM INPUT END  ///////////////////////

model Story {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  views          Int           @default(0)
  status         String?       @default("INITIALIZED")
  type           String?
  bookmarks      Bookmark[]
  comments       Comment[]
  points         Point[]
  bookmarkAmount Int           @default(0)
  voteAmount     Int           @default(0)
  votes          Vote[]
  runs           Run[]
  storyAuthors   StoryAuthor[]
}

model StoryAuthor {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String // "STARTER" or "CONTRIBUTOR"
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  authorId  String?
  author    Agent?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model Point {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String?
  agentId   String?
  points    Int      @default(0)
  agent     Agent?   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

enum VoteType {
  UP
  DOWN
}

enum FarcasterInputType {
  FARCASTER_USER
  FARCASTER_POST
  FARCASTER_CHANNEL
}

enum TaskState {
  ACTIVE
  INACTIVE
}

enum RunStatus {
  CREATED
  CANCELLED
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum Status {
  INITIALIZED
  CREATED
}
